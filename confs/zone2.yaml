binary_sensor:
  - platform: ecodan
    status_prohibit_heating_z2:
      id: status_prohibit_heating_z2
      name: ${status_prohibit_heating_z2}
    status_prohibit_cool_z2:
      id: status_prohibit_cool_z2
      name: ${status_prohibit_cool_z2}
    status_three_way_valve_2:
      id: status_three_way_valve_2
      name: ${status_three_way_valve_2}
    status_water_pump_2:
      id: status_water_pump_2
      name: ${status_water_pump_2}

climate:
  - platform: ecodan
    heatpump_climate_z2:
      name: ${heatpump_climate_z2}
      id: heatpump_climate_z2
      get_status_func: |-
        return id(ecodan_instance).get_status();
      get_target_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        auto mode = status.HeatingCoolingMode;
        switch (mode) {
            case esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_COMPENSATION_CURVE:
              return status.Zone2FlowTemperatureSetPoint;
            break;
            case esphome::ecodan::Status::HpMode::COOL_ROOM_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_ROOM_TEMP:
              return status.Zone2SetTemperature;
            break;
            default:
              return NAN;
        }      
      target_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        auto mode = status.HeatingCoolingMode;
        switch (mode) {
            case esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP:
              id(ecodan_instance).set_flow_target_temperature(x, esphome::ecodan::SetZone::ZONE_2);
            break;
            case esphome::ecodan::Status::HpMode::COOL_ROOM_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_ROOM_TEMP:
              id(ecodan_instance).set_room_temperature(x, esphome::ecodan::SetZone::ZONE_2);
            break;                    
        }
      heating_switch_func: |-
        id(ecodan_instance).set_hp_mode(esphome::ecodan::Status::HpMode::${default_heating_switch_mode});
      cooling_switch_func: |-
        id(ecodan_instance).set_hp_mode(esphome::ecodan::Status::HpMode::${default_cooling_switch_mode});
      current_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        auto mode = status.HeatingCoolingMode;
        switch (mode) {
            case esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_COMPENSATION_CURVE:
              return status.HpFeedTemperature;
            break;
            case esphome::ecodan::Status::HpMode::COOL_ROOM_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_ROOM_TEMP:
              return status.Zone2RoomTemperature;
            break;
            default:
              return NAN;                    
        } 

sensor:
  - platform: ecodan
    z2_flow_temp_target:
      id: z2_flow_temp_target
      name: ${z2_flow_temp_target}
      # on_value:
      #   if:
      #     condition:
      #       - lambda: |-
      #           return id(heatpump_number_z2_set_flow_temperature).state != id(z2_flow_temp_target).state;
      #     then:
      #       - number.set:
      #           id: heatpump_number_z2_set_flow_temperature
      #           value: !lambda "return id(z2_flow_temp_target).state;"
    z2_room_temp:
      id: z2_room_temp
      name: ${z2_room_temp}      
    z2_room_temp_target:
      id: z2_room_temp_target
      name: ${z2_room_temp_target}
      # on_value:
      #   if:
      #     condition:
      #       - lambda: |-
      #           return id(heatpump_number_z2_set_room_temperature).state != id(z2_room_temp_target).state;
      #     then:
      #       - number.set:
      #           id: heatpump_number_z2_set_room_temperature
      #           value: !lambda "return id(z2_room_temp_target).state;"