binary_sensor:
  - platform: ecodan
    status_prohibit_heating_z1:
      id: status_prohibit_heating_z1
      name: ${status_prohibit_heating_z1}
    status_prohibit_cool_z1:
      id: status_prohibit_cool_z1
      name: ${status_prohibit_cool_z1}

climate:
  - platform: ecodan
    heatpump_climate_z1:
      name: ${heatpump_climate_z1}
      id: heatpump_climate_z1
      get_status_func: |-
        return id(ecodan_instance).get_status();
      get_target_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        auto mode = status.HeatingCoolingMode;
        switch (mode) {
            case esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_COMPENSATION_CURVE:
              return status.Zone1FlowTemperatureSetPoint;
            break;
            case esphome::ecodan::Status::HpMode::COOL_ROOM_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_ROOM_TEMP:
              return status.Zone1SetTemperature;
            break;
            default:
              return NAN;
        }        
      target_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        auto mode = status.HeatingCoolingMode;
        switch (mode) {
            case esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP:
              id(ecodan_instance).set_flow_target_temperature(x, esphome::ecodan::SetZone::ZONE_1);
            break;
            case esphome::ecodan::Status::HpMode::COOL_ROOM_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_ROOM_TEMP:
              id(ecodan_instance).set_room_temperature(x, esphome::ecodan::SetZone::ZONE_1);
            break;                    
        }
      heating_switch_func: |-
        id(ecodan_instance).set_hp_mode(static_cast<uint8_t>(esphome::ecodan::Status::HpMode::${default_heating_switch_mode}));
      cooling_switch_func: |-
        id(ecodan_instance).set_hp_mode(static_cast<uint8_t>(esphome::ecodan::Status::HpMode::${default_cooling_switch_mode}));
      current_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        auto mode = status.HeatingCoolingMode;
        switch (mode) {
            case esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_COMPENSATION_CURVE:
              return status.HpFeedTemperature;
            break;
            case esphome::ecodan::Status::HpMode::COOL_ROOM_TEMP:
            case esphome::ecodan::Status::HpMode::HEAT_ROOM_TEMP:
              return status.Zone1RoomTemperature;
            break;
            default:
              return NAN;
        }

sensor:
  - platform: ecodan
    z1_flow_temp_target:
      id: z1_flow_temp_target
      name: ${z1_flow_temp_target}
    z1_room_temp:
      id: z1_room_temp
      name: ${z1_room_temp}      
    z1_room_temp_target:
      id: z1_room_temp_target
      name: ${z1_room_temp_target}
